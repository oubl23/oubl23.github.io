#+TITLE:       数据结构interview
#+AUTHOR:      
#+EMAIL:       dabao@obl2343
#+DATE:        2016-09-11 Sun
#+URI:         /blog/2016/9/11/数据结构interview
#+KEYWORDS:    data,interview
#+TAGS:        data
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: interview
* 线性表
** 顺序表
- 随机访问
- 占用连续存储空间/静态分配
- 存储密度等于1
#+BEGIN_SRC 
typedef struct {
  int elem[100];
  int length;
} Sqlist;
#+END_SRC
** 链表
- 顺序存取
- 动态分配存储空间
- 存储密度小于1
*** 单链表
#+BEGIN_SRC 
typedef struct LNode{
  int elem;
  struct LNode *next;
}LNode, *LinkList;

#+END_SRC
*** 循环链表
*** 双向链表
#+BEGIN_SRC
struct DLNode {
  int elem;
  struct DLNode *prior;
  struct DLNode *next;
}DLNode, *DLinkList;
#+END_SRC
*** 静态链表
用数组模拟操作，实现的链表，指针域，使用数组下标表示
#+BEGIN_SRC 
typedef struct{
  int elem;
  int next;
}SLNode,slinklist[MAXSIZE]
#+END_SRC
** 栈(LIFO)
概念：特殊的线性结构，栈是限定在表的一段进行插入和删除运算的线性表，后进先出（LIFO）的线性表。
** 队列(FIFO)
概念：队列也是一种特殊的线性表，他是操作受限的线性表。他只允许在表的一端进行元素的插入，而在另一端进行元素的删除。允许插入的一端称为队尾，允许删除的一端称为队头。
* 树
** 二叉树
有且只有一个根节点，起根节点的子集合又是树
广意上的表达法(A,(B(D,E),C(F,G)))
*** 性质:
- 二叉树i层上最多有2^(i-1)个节点
- 深度为k的二叉树最多有2^k-1个节点
- 满二叉树，在一棵深度为k且有2k-1个结点。完全二叉树，若一棵深度为k的二叉树，其前k-1层是一个棵满二叉树，而最下面一层(即第k层)上的结点都集中在该层最左边的若干位置上。
*** 操作：
- 插入节点
思路：首先找到要插入节点的父节点，然后确定插到父节点的左边还是右边，最后将节点插入。

- 查找节点
思路：运用递归查找。

- 计算树的深度
思路：分别递归左子树和右子树，取长度较大的那一个作为整个树的深度。

- 遍历之先序遍历
思路：先访问根，然后遍历左子树，再遍历右子树

- 遍历之中序遍历
思路：先遍历左子树，再访问根，最后遍历右子树

- 遍历之后序遍历
思路：先遍历左子树，再遍历右子树，最后访问根

- 遍历之层次遍历
思路：从上到小，从左到右遍历
*** 存储数据
- 顺序存储(需要完全二叉树)
- 链式存储(常用)

** 线索二叉树
在有n个节点的二叉树链表中必定存在n+1个空指针域，因此可以利用这些空指针域存放指向结点的某种前趋和后继的指针称为线索，加上线索的二叉链表称为线索链表，相应的 
二叉树称为线索二叉树。

** 哈夫曼树（最优二叉树）
哈夫曼树是一种带权路径长度最短的二叉树，也称为最优二叉树。
